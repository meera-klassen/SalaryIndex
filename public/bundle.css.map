{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  export let name;\r\n  import csv from \"csvtojson/browser/browser.js\";\r\n  import Comp from \"./comp.svelte\";\r\n  const headers = [\r\n    \"job_title\",\r\n    \"job_type\",\r\n    \"category\",\r\n    \"location\",\r\n    \"permanent_low\",\r\n    \"permanent_high\",\r\n    \"contract_low\",\r\n    \"contract_high\"\r\n  ];\r\n  let all_jobs = null;\r\n  let result = null;\r\n  let query = \"\";\r\n  let queryMirror = \"\";\r\n  let selectedJobType;\r\n  let selectedJobCategory;\r\n  let selectedJobLocation;\r\n  let location = [];\r\n  let category = [];\r\n  let jobType = null;\r\n  let jobCategory = null;\r\n  let jobLocation = null;\r\n  let type = null;\r\n  let finishTime = null;\r\n  let all_categories = [];\r\n  let all_locations = [];\r\n  let all_jobType = [];\r\n  let sortFilter = \"median_high\";\r\n  let jobCount = {};\r\n\r\n  const cleanArr = arr => arr.filter(i => i.length);\r\n  async function setCSV(e) {\r\n    result = all_jobs = JSON.parse(document.querySelector(\"#salary-data-json #slary-json-string\").innerHTML)\r\n    all_categories = all_jobs.reduce((acc, { category: cat }) => {\r\n      if (acc.includes(cat.toLowerCase())) return acc;\r\n      return acc.concat(cat.toLowerCase());\r\n    }, []);\r\n    all_locations = all_jobs.reduce((acc, { location: loc }) => {\r\n      if (acc.includes(loc.toLowerCase())) return acc;\r\n      return acc.concat(loc.toLowerCase());\r\n    }, []);\r\n    all_jobType = all_jobs.reduce((acc, { job_type: jobt }) => {\r\n      if (acc.includes(jobt.toLowerCase())) return acc;\r\n      return acc.concat(jobt.toLowerCase());\r\n    }, []);\r\n    updateCounters();\r\n  }\r\n\r\n  function searchQuery(e) {\r\n    const val = e.target.value.toLowerCase();\r\n    if (!all_jobs) return;\r\n    query = val;\r\n    search();\r\n  }\r\n\r\n  // function filterJobType(e) {\r\n  //   const val = e.target.value;\r\n  //   const checked = e.target.checked;\r\n  //   if (checked) {\r\n  //     jobType = jobType.concat(val);\r\n  //   } else {\r\n  //     jobType = jobType.filter(j => j !== val);\r\n  //   }\r\n  //   search();\r\n  // }\r\n\r\n  function filterJobLocation(e) {\r\n    jobLocation = e.target.value;\r\n    search();\r\n  }\r\n\r\n  function filterJobCategory(e) {\r\n    jobCategory = e.target.value;\r\n    search();\r\n  }\r\n\r\n  function filterJobType(e) {\r\n    jobType = e.target.value;\r\n    search();\r\n  }\r\n\r\n  function search() {\r\n    const start = window.performance.now();\r\n    result = all_jobs\r\n      .filter(job => {\r\n        const conditions = [];\r\n        let match = true;\r\n        const sanitised_jobType = jobType;\r\n        const sanitised_jobCategory = jobCategory;\r\n        const sanitised_jobLocation = jobLocation;\r\n        if (twoWayMatch(query, job.job_title)) match = true;\r\n\r\n        if (sanitised_jobLocation) {\r\n          match = sanitised_jobLocation === job.location;\r\n        }\r\n        if (sanitised_jobCategory && match ) {\r\n          match = sanitised_jobCategory === job.category;\r\n        }\r\n        if (sanitised_jobType && match ) {\r\n          match = sanitised_jobType === job.job_type;\r\n        }\r\n        return match;\r\n      })\r\n      .sort(_sortHandler);\r\n    finishTime = (window.performance.now() - start).toFixed(5);\r\n    updateCounters(\"result\");\r\n  }\r\n\r\n  function twoWayMatch(a = \"\", b = \"\") {\r\n    a = a.toLowerCase();\r\n    b = b.toLowerCase();\r\n    return a.includes(b) || b.includes(a);\r\n  }\r\n  function median(values) {\r\n    values.sort(function(a, b) {\r\n      return a - b;\r\n    });\r\n    var half = Math.floor(values.length / 2);\r\n\r\n    if (values.length % 2) return values[half];\r\n    else return (values[half - 1] + values[half]) / 2.0;\r\n  }\r\n  function sortBySalary(e) {\r\n    const start = window.performance.now();\r\n    let val = e.target.value;\r\n    sortFilter = val;\r\n\r\n    if (!result) return;\r\n    result = result.sort(_sortHandler);\r\n    finishTime = (window.performance.now() - start).toFixed(5);\r\n  }\r\n\r\n  function _sortHandler(a, b) {\r\n    const lowA = parseInt(a.permanent_low.replace(\"k\", \"000\"));\r\n    const lowB = parseInt(b.permanent_low.replace(\"k\", \"000\"));\r\n    const highA = parseInt(a.permanent_high.replace(\"k\", \"000\"));\r\n    const highB = parseInt(b.permanent_high.replace(\"k\", \"000\"));\r\n    const medianA = median([lowA, highA]);\r\n    const medianB = median([lowB, highB]);\r\n    switch (sortFilter) {\r\n      case \"low_low\":\r\n        return lowA > lowB ? 1 : -1;\r\n      case \"high_low\":\r\n        return lowA < lowB ? 1 : -1;\r\n      case \"low_high\":\r\n        return highA > highB ? 1 : -1;\r\n      case \"high_high\":\r\n        return highA < highB ? 1 : -1;\r\n      case \"median_low\":\r\n        return medianA > medianB ? 1 : -1;\r\n      case \"median_high\":\r\n        return medianA < medianB ? 1 : -1;\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n\r\n  function updateCounters(type = \"all_jobs\") {\r\n    new Promise(resolve => {\r\n      const counts = {};\r\n      const buildCounts = ({ category, location, job_type }) => {\r\n        category = category.toLowerCase();\r\n        location = location.toLowerCase();\r\n        job_type = job_type.toLowerCase();\r\n        counts[`cat_${category}`] = ++counts[`cat_${category}`] || 1;\r\n        counts[`loc_${location}`] = ++counts[`loc_${location}`] || 1;\r\n        counts[`jobt_${job_type}`] = ++counts[`jobt_${job_type}`] || 1;\r\n      };\r\n      if (type === \"all_jobs\") {\r\n        all_jobs.forEach(buildCounts);\r\n      } else if (type === \"result\") {\r\n        result.forEach(buildCounts);\r\n        \r\n      }\r\n      jobCount = counts;\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  function matchFilter(arr = [], val = \"\") {\r\n    return arr.some(i => i.length && twoWayMatch(i, val));\r\n  }\r\n\r\n  $: queryMirror = query + `...oh yah.. I'm derived !`;\r\n\r\n  $: document.title = query;\r\n  setCSV()\r\n</script>\r\n\r\n<style>\r\n  h1 {\r\n    color: green;\r\n  }\r\n   teal {\r\n    color: teal;\r\n  }\r\n  red {\r\n    color: red;\r\n  }\r\n  blue {\r\n    color: blue;\r\n  }\r\n  green {\r\n    color: green;\r\n  }\r\n  teal {\r\n    color: teal;\r\n  }\r\n  .search {\r\n    display: block;\r\n    margin-bottom: 20px;\r\n  }\r\n  .filters > div {\r\n    display: grid;\r\n    grid-template-columns: minmax(auto, 12px) auto;\r\n    grid-column-gap: 8px;\r\n  }\r\n  /* .filters label span {\r\n    color: #8c8c8c;\r\n    font-size: 11px;\r\n  } */\r\n  .results-container {\r\n    display: block;\r\n  }\r\n</style>\r\n\r\n<Comp />\r\n<div class=\"search\">\r\n  <input placeholder=\"Job Title\" type=\"text\" on:input={searchQuery} />\r\n  <select bind:value={selectedJobType} on:change={filterJobType}>\r\n    <option value=null selected disabled>Job Type</option>\r\n    {#each all_jobType as jobt, i}\r\n      <option id={jobt} value={jobt} selectedJobType={jobType}>{jobt} (<span>{jobCount[`jobt_${jobt}`] || 0}</span>)</option>\r\n    {/each}\r\n  </select>\r\n  <select bind:value={selectedJobCategory} on:change={filterJobCategory}>\r\n    <option value=null selected disabled>Category</option>\r\n    {#each all_categories as cat, i}\r\n      <option id={cat} value={cat} selectedJobCategory={jobCategory}>{cat} (<span>{jobCount[`cat_${cat}`] || 0}</span>)</option>\r\n    {/each}\r\n  </select>\r\n  <select bind:value={selectedJobLocation} on:change={filterJobLocation}>\r\n    <option value=null selected disabled>Location</option>\r\n    {#each all_locations as loc, i}\r\n      <option id={loc} value={loc} selectedJobLocation={jobLocation}>{loc} (<span>{jobCount[`loc_${loc}`] || 0}</span>)</option>\r\n    {/each}\r\n  </select>\r\n</div>\r\n<div class=\"results-container\">\r\n\r\n  <div class=\"results\">\r\n    {#if result}\r\n      <p>\r\n        Found {result.length} results! in {all_jobs.length} during {finishTime}\r\n        milliseconds\r\n      </p>\r\n      <ol>\r\n        {#each result as { job_title, job_type, category, location, permanent_high, permanent_low }, i}\r\n          <li>\r\n            <teal><b>{job_title}</b></teal> of\r\n            <b>{job_type}</b>\r\n            in\r\n            <b>{category}</b>\r\n            in\r\n            <b>{location}</b>\r\n            for\r\n            <b>{permanent_low}-{permanent_high}</b>\r\n          </li>\r\n        {:else}Nothing to Show{/each}\r\n      </ol>\r\n    {:else if result === null && all_jobs === null}\r\n      <p>You need to upload a CSV first!</p>\r\n    {:else if result === null && all_jobs}\r\n      <p>Type to search!</p>\r\n    {:else}\r\n      <p>No results found for your search!</p>\r\n    {/if}\r\n  </div>\r\n</div>\r\n"
  ],
  "names": [],
  "mappings": "AAqMG,IAAI,eAAC,CAAC,AACL,KAAK,CAAE,IAAI,AACb,CAAC,AAUD,IAAI,eAAC,CAAC,AACJ,KAAK,CAAE,IAAI,AACb,CAAC,AACD,OAAO,eAAC,CAAC,AACP,OAAO,CAAE,KAAK,CACd,aAAa,CAAE,IAAI,AACrB,CAAC,AACD,QAAQ,CAAG,GAAG,eAAC,CAAC,AACd,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAC9C,eAAe,CAAE,GAAG,AACtB,CAAC,AAKD,kBAAkB,eAAC,CAAC,AAClB,OAAO,CAAE,KAAK,AAChB,CAAC"
}